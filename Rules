#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

require 'set'

preprocess do
  tags = Set.new
  items.each do |item|
    tags.merge(item[:tags] || [])
  end

  tags.each do |tag|
    items << Nanoc::Item.new("", { tag: tag }, "/nulog/#{tag}/")
  end
end

compile '/nulog/business|programming|innovation|society|technology|web/' do
  layout 'tag'
  layout 'default'
end


compile '/css/*/' do
  ext = item[:extension].nil? ? nil : item[:extension].split('.').last

  if ext == 'erb'
    filter :erb
  end

  filter :yui_compressor, type: 'css'
end

compile '/js/*/' do
  ext = item[:extension].nil? ? nil : item[:extension].split('.').last

  if ext == 'erb'
    filter :erb
  end

  filter :yui_compressor, type: 'js'
end

compile '/images/*/' do
end

compile '/fonts/*/' do
end

compile '/flow/' do
  filter :slim
  layout 'default'
end

compile '/blog/*/' do
  filter :rdiscount, :extensions => %w( strict smart )
  layout 'post'
  layout 'default'
end

compile '/projects/*/' do
  filter :rdiscount, :extensions => %w( strict smart )
  layout 'project'
  layout 'default'
end

compile 'googleb74edef4a46cf19d' do
end

compile 'google51cdab9265302e7f' do
end

compile 'sitemap' do
  filter :slim
end

compile '*' do
  ext = item[:extension].nil? ? nil : item[:extension].split('.').last

  if item.binary?
    # don’t filter binary items
  elsif ext == 'md' || ext == 'markdown'
    filter :erb
    filter :rdiscount
    layout 'default'
  else
    filter :slim
    layout 'default'
  end
end



route '/css/*/' do
  item.identifier.chop + '.css'
end

route '/js/*/' do
  item.identifier.chop + '.js'
end

route '/fonts/*/' do
end

route '/images/*/' do
  '/assets' + item.identifier.chop + '.' + item[:extension]
end

route '/blog/*/' do
  item.identifier.gsub(%r{^/blog/(\d+)-(\d+)_(.*)$}) do |match|
    "/#{$1}/#{$2}/#{$3}" + 'index.html'
  end
end

route 'googleb74edef4a46cf19d' do
  item.identifier.chop + '.html'
end

route 'google51cdab9265302e7f' do
  item.identifier.chop + '.html'
end

route 'sitemap' do
  item.identifier.chop + '.xml'
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :slim
